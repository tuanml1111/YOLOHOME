{"ast":null,"code":"import apiService from '../services/apiService';\nclass SensorController {\n  static async getLatestReadings() {\n    try {\n      // Fetch real sensor data from API\n      const response = await apiService.get('/sensors/readings');\n      if (response.data && response.data.data) {\n        return {\n          temperature: parseFloat(response.data.data.temperature || 0).toFixed(1),\n          humidity: parseFloat(response.data.data.humidity || 0).toFixed(1),\n          motion: response.data.data.motion === 1 || response.data.data.motion === true\n        };\n      }\n\n      // Fallback to mock data if API fails or returns unexpected format\n      return {\n        temperature: (Math.random() * 10 + 25).toFixed(1),\n        humidity: (Math.random() * 20 + 60).toFixed(1),\n        motion: Math.random() > 0.7\n      };\n    } catch (error) {\n      console.error('Error fetching sensor readings:', error);\n      // Fallback to mock data\n      return {\n        temperature: (Math.random() * 10 + 25).toFixed(1),\n        humidity: (Math.random() * 20 + 60).toFixed(1),\n        motion: Math.random() > 0.7\n      };\n    }\n  }\n  static async getSensorHistory(sensorType, timeRange = 'day') {\n    try {\n      // In a real application, we would fetch historical data from the API\n      // For now, let's generate mock data\n      const now = new Date();\n      const data = [];\n\n      // Generate mock data points\n      if (timeRange === 'day') {\n        // 24 hours, one point per hour\n        for (let i = 23; i >= 0; i--) {\n          const timestamp = new Date(now);\n          timestamp.setHours(now.getHours() - i);\n          let value;\n          if (sensorType === 'temperature') {\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\n          } else if (sensorType === 'humidity') {\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\n          } else {\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\n          }\n          data.push({\n            timestamp: timestamp.toISOString(),\n            value: parseFloat(value)\n          });\n        }\n      }\n      return data;\n    } catch (error) {\n      console.error(`Error fetching ${sensorType} history:`, error);\n      throw error;\n    }\n  }\n  static async getRecentAlerts() {\n    try {\n      // Fetch real alerts from API\n      const response = await apiService.get('/alerts/recent');\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\n        return response.data.data.map(alert => ({\n          id: alert.alert_id,\n          type: alert.alert_type.toLowerCase(),\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        }));\n      }\n\n      // Fallback to mock data if API fails or returns unexpected format\n      return [{\n        id: 1,\n        type: 'temperature',\n        message: 'Temperature exceeded 30°C',\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 2,\n        type: 'motion',\n        message: 'Motion detected in living room',\n        timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 3,\n        type: 'humidity',\n        message: 'Humidity level below 30%',\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\n        status: 'resolved'\n      }];\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      // Fallback to mock data\n      return [{\n        id: 1,\n        type: 'temperature',\n        message: 'Temperature exceeded 30°C',\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 2,\n        type: 'motion',\n        message: 'Motion detected in living room',\n        timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 3,\n        type: 'humidity',\n        message: 'Humidity level below 30%',\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\n        status: 'resolved'\n      }];\n    }\n  }\n}\nexport default SensorController;","map":{"version":3,"names":["apiService","SensorController","getLatestReadings","response","get","data","temperature","parseFloat","toFixed","humidity","motion","Math","random","error","console","getSensorHistory","sensorType","timeRange","now","Date","i","timestamp","setHours","getHours","value","push","toISOString","getRecentAlerts","Array","isArray","map","alert","id","alert_id","type","alert_type","toLowerCase","message","amessage","alerted_time","status"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy/frontend/src/controllers/SensorController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass SensorController {\r\n  static async getLatestReadings() {\r\n    try {\r\n      // Fetch real sensor data from API\r\n      const response = await apiService.get('/sensors/readings');\r\n      \r\n      if (response.data && response.data.data) {\r\n        return {\r\n          temperature: parseFloat(response.data.data.temperature || 0).toFixed(1),\r\n          humidity: parseFloat(response.data.data.humidity || 0).toFixed(1),\r\n          motion: response.data.data.motion === 1 || response.data.data.motion === true\r\n        };\r\n      }\r\n      \r\n      // Fallback to mock data if API fails or returns unexpected format\r\n      return {\r\n        temperature: (Math.random() * 10 + 25).toFixed(1),\r\n        humidity: (Math.random() * 20 + 60).toFixed(1),\r\n        motion: Math.random() > 0.7\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching sensor readings:', error);\r\n      // Fallback to mock data\r\n      return {\r\n        temperature: (Math.random() * 10 + 25).toFixed(1),\r\n        humidity: (Math.random() * 20 + 60).toFixed(1),\r\n        motion: Math.random() > 0.7\r\n      };\r\n    }\r\n  }\r\n  \r\n  static async getSensorHistory(sensorType, timeRange = 'day') {\r\n    try {\r\n      // In a real application, we would fetch historical data from the API\r\n      // For now, let's generate mock data\r\n      const now = new Date();\r\n      const data = [];\r\n      \r\n      // Generate mock data points\r\n      if (timeRange === 'day') {\r\n        // 24 hours, one point per hour\r\n        for (let i = 23; i >= 0; i--) {\r\n          const timestamp = new Date(now);\r\n          timestamp.setHours(now.getHours() - i);\r\n          \r\n          let value;\r\n          if (sensorType === 'temperature') {\r\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\r\n          } else if (sensorType === 'humidity') {\r\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\r\n          } else {\r\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\r\n          }\r\n          \r\n          data.push({\r\n            timestamp: timestamp.toISOString(),\r\n            value: parseFloat(value)\r\n          });\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error(`Error fetching ${sensorType} history:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getRecentAlerts() {\r\n    try {\r\n      // Fetch real alerts from API\r\n      const response = await apiService.get('/alerts/recent');\r\n      \r\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\r\n        return response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          type: alert.alert_type.toLowerCase(),\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n      }\r\n      \r\n      // Fallback to mock data if API fails or returns unexpected format\r\n      return [\r\n        {\r\n          id: 1,\r\n          type: 'temperature',\r\n          message: 'Temperature exceeded 30°C',\r\n          timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 2,\r\n          type: 'motion',\r\n          message: 'Motion detected in living room',\r\n          timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 3,\r\n          type: 'humidity',\r\n          message: 'Humidity level below 30%',\r\n          timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\r\n          status: 'resolved'\r\n        }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      // Fallback to mock data\r\n      return [\r\n        {\r\n          id: 1,\r\n          type: 'temperature',\r\n          message: 'Temperature exceeded 30°C',\r\n          timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 2,\r\n          type: 'motion',\r\n          message: 'Motion detected in living room',\r\n          timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 3,\r\n          type: 'humidity',\r\n          message: 'Humidity level below 30%',\r\n          timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\r\n          status: 'resolved'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\nexport default SensorController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}