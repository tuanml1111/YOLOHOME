{"ast":null,"code":"import DeviceModel from '../models/DeviceModel';\nimport apiService from '../services/apiService';\nimport deviceService from '../services/deviceService';\nclass DeviceController {\n  static async getAllDevices() {\n    try {\n      // Fetch devices from the API through deviceService\n      const devices = await deviceService.getDevices();\n\n      // Convert plain objects to DeviceModel instances\n      return devices.map(device => new DeviceModel(device));\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n      throw error;\n    }\n  }\n  static async getDeviceById(id) {\n    try {\n      // In a real application, we would fetch data from the API\n      // For now, let's find the device from our mock data\n      const devices = await this.getAllDevices();\n      const device = devices.find(d => d.id === id);\n      if (!device) {\n        throw new Error('Device not found');\n      }\n      return device;\n    } catch (error) {\n      console.error(`Error fetching device with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async updateDeviceStatus(id, status) {\n    try {\n      // Call the API to update the device status\n      const response = await apiService.put(`/devices/${id}`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating device status for id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async getDeviceStats() {\n    try {\n      // Fetch stats from the API\n      const response = await apiService.get('/devices/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching device stats:', error);\n      throw error;\n    }\n  }\n  static async toggleDeviceByType(deviceType) {\n    try {\n      // Call the API endpoint to toggle devices by type\n      const response = await apiService.post('/devices/toggle-by-type', {\n        deviceType\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\n      throw error;\n    }\n  }\n}\nexport default DeviceController;","map":{"version":3,"names":["DeviceModel","apiService","deviceService","DeviceController","getAllDevices","devices","getDevices","map","device","error","console","getDeviceById","id","find","d","Error","updateDeviceStatus","status","response","put","data","getDeviceStats","get","toggleDeviceByType","deviceType","post"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy/frontend/src/controllers/DeviceController.js"],"sourcesContent":["import DeviceModel from '../models/DeviceModel';\r\nimport apiService from '../services/apiService';\r\nimport deviceService from '../services/deviceService';\r\n\r\nclass DeviceController {\r\n  static async getAllDevices() {\r\n    try {\r\n      // Fetch devices from the API through deviceService\r\n      const devices = await deviceService.getDevices();\r\n      \r\n      // Convert plain objects to DeviceModel instances\r\n      return devices.map(device => new DeviceModel(device));\r\n    } catch (error) {\r\n      console.error('Error fetching devices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceById(id) {\r\n    try {\r\n      // In a real application, we would fetch data from the API\r\n      // For now, let's find the device from our mock data\r\n      const devices = await this.getAllDevices();\r\n      const device = devices.find(d => d.id === id);\r\n      \r\n      if (!device) {\r\n        throw new Error('Device not found');\r\n      }\r\n      \r\n      return device;\r\n    } catch (error) {\r\n      console.error(`Error fetching device with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async updateDeviceStatus(id, status) {\r\n    try {\r\n      // Call the API to update the device status\r\n      const response = await apiService.put(`/devices/${id}`, { status });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating device status for id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceStats() {\r\n    try {\r\n      // Fetch stats from the API\r\n      const response = await apiService.get('/devices/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching device stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async toggleDeviceByType(deviceType) {\r\n    try {\r\n      // Call the API endpoint to toggle devices by type\r\n      const response = await apiService.post('/devices/toggle-by-type', { deviceType });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeviceController;"],"mappings":"AAAA,OAAOA,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,aAAa,MAAM,2BAA2B;AAErD,MAAMC,gBAAgB,CAAC;EACrB,aAAaC,aAAaA,CAAA,EAAG;IAC3B,IAAI;MACF;MACA,MAAMC,OAAO,GAAG,MAAMH,aAAa,CAACI,UAAU,CAAC,CAAC;;MAEhD;MACA,OAAOD,OAAO,CAACE,GAAG,CAACC,MAAM,IAAI,IAAIR,WAAW,CAACQ,MAAM,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;EAEA,aAAaE,aAAaA,CAACC,EAAE,EAAE;IAC7B,IAAI;MACF;MACA;MACA,MAAMP,OAAO,GAAG,MAAM,IAAI,CAACD,aAAa,CAAC,CAAC;MAC1C,MAAMI,MAAM,GAAGH,OAAO,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;MAE7C,IAAI,CAACJ,MAAM,EAAE;QACX,MAAM,IAAIO,KAAK,CAAC,kBAAkB,CAAC;MACrC;MAEA,OAAOP,MAAM;IACf,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiCG,EAAE,GAAG,EAAEH,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;EACF;EAEA,aAAaO,kBAAkBA,CAACJ,EAAE,EAAEK,MAAM,EAAE;IAC1C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMjB,UAAU,CAACkB,GAAG,CAAC,YAAYP,EAAE,EAAE,EAAE;QAAEK;MAAO,CAAC,CAAC;MACnE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuCG,EAAE,GAAG,EAAEH,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF;EAEA,aAAaY,cAAcA,CAAA,EAAG;IAC5B,IAAI;MACF;MACA,MAAMH,QAAQ,GAAG,MAAMjB,UAAU,CAACqB,GAAG,CAAC,gBAAgB,CAAC;MACvD,OAAOJ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;EAEA,aAAac,kBAAkBA,CAACC,UAAU,EAAE;IAC1C,IAAI;MACF;MACA,MAAMN,QAAQ,GAAG,MAAMjB,UAAU,CAACwB,IAAI,CAAC,yBAAyB,EAAE;QAAED;MAAW,CAAC,CAAC;MACjF,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCe,UAAU,GAAG,EAAEf,KAAK,CAAC;MACrE,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAeN,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}