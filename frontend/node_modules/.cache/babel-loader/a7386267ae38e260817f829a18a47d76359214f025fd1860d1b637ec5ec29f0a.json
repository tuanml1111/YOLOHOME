{"ast":null,"code":"import DeviceModel from '../models/DeviceModel';\nimport apiService from '../services/apiService';\nclass DeviceController {\n  static async getAllDevices() {\n    try {\n      // In a real application, we would fetch data from the API\n      // For now, let's use mock data\n      const mockDevices = [{\n        id: 1,\n        name: 'Living Room Light',\n        type: 'light',\n        location: 'Living Room',\n        status: 'active',\n        lastUpdated: new Date().toISOString()\n      }, {\n        id: 2,\n        name: 'Bedroom Fan',\n        type: 'fan',\n        location: 'Bedroom',\n        status: 'inactive',\n        lastUpdated: new Date().toISOString()\n      }, {\n        id: 3,\n        name: 'Kitchen Light',\n        type: 'light',\n        location: 'Kitchen',\n        status: 'active',\n        lastUpdated: new Date().toISOString()\n      }, {\n        id: 4,\n        name: 'Front Door Lock',\n        type: 'lock',\n        location: 'Front Door',\n        status: 'active',\n        lastUpdated: new Date().toISOString()\n      }];\n\n      // Convert plain objects to DeviceModel instances\n      return mockDevices.map(device => new DeviceModel(device));\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n      throw error;\n    }\n  }\n  static async getDeviceById(id) {\n    try {\n      // In a real application, we would fetch data from the API\n      // For now, let's find the device from our mock data\n      const devices = await this.getAllDevices();\n      const device = devices.find(d => d.id === id);\n      if (!device) {\n        throw new Error('Device not found');\n      }\n      return device;\n    } catch (error) {\n      console.error(`Error fetching device with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async updateDeviceStatus(id, status) {\n    try {\n      // In a real application, we would update the device status via the API\n      // For now, let's simulate an API call with a delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Simulate API response\n      const updatedDevice = {\n        id,\n        status,\n        lastUpdated: new Date().toISOString()\n      };\n      return updatedDevice;\n    } catch (error) {\n      console.error(`Error updating device status for id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async getDeviceStats() {\n    try {\n      // In a real application, we would fetch stats from the API\n      // For now, let's calculate from our mock data\n      const devices = await this.getAllDevices();\n      const stats = {\n        total: devices.length,\n        online: devices.filter(d => d.status === 'active').length,\n        offline: devices.filter(d => d.status === 'inactive').length\n      };\n      return stats;\n    } catch (error) {\n      console.error('Error fetching device stats:', error);\n      throw error;\n    }\n  }\n  static async toggleDeviceByType(deviceType) {\n    try {\n      // In a real application, we would call an API endpoint to toggle devices by type\n      // For now, let's simulate an API call with a delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\n      throw error;\n    }\n  }\n}\nexport default DeviceController;","map":{"version":3,"names":["DeviceModel","apiService","DeviceController","getAllDevices","mockDevices","id","name","type","location","status","lastUpdated","Date","toISOString","map","device","error","console","getDeviceById","devices","find","d","Error","updateDeviceStatus","Promise","resolve","setTimeout","updatedDevice","getDeviceStats","stats","total","length","online","filter","offline","toggleDeviceByType","deviceType","success"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME/frontend/src/controllers/DeviceController.js"],"sourcesContent":["import DeviceModel from '../models/DeviceModel';\r\nimport apiService from '../services/apiService';\r\n\r\nclass DeviceController {\r\n  static async getAllDevices() {\r\n    try {\r\n      // In a real application, we would fetch data from the API\r\n      // For now, let's use mock data\r\n      const mockDevices = [\r\n        {\r\n          id: 1,\r\n          name: 'Living Room Light',\r\n          type: 'light',\r\n          location: 'Living Room',\r\n          status: 'active',\r\n          lastUpdated: new Date().toISOString()\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Bedroom Fan',\r\n          type: 'fan',\r\n          location: 'Bedroom',\r\n          status: 'inactive',\r\n          lastUpdated: new Date().toISOString()\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'Kitchen Light',\r\n          type: 'light',\r\n          location: 'Kitchen',\r\n          status: 'active',\r\n          lastUpdated: new Date().toISOString()\r\n        },\r\n        {\r\n          id: 4,\r\n          name: 'Front Door Lock',\r\n          type: 'lock',\r\n          location: 'Front Door',\r\n          status: 'active',\r\n          lastUpdated: new Date().toISOString()\r\n        }\r\n      ];\r\n      \r\n      // Convert plain objects to DeviceModel instances\r\n      return mockDevices.map(device => new DeviceModel(device));\r\n    } catch (error) {\r\n      console.error('Error fetching devices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceById(id) {\r\n    try {\r\n      // In a real application, we would fetch data from the API\r\n      // For now, let's find the device from our mock data\r\n      const devices = await this.getAllDevices();\r\n      const device = devices.find(d => d.id === id);\r\n      \r\n      if (!device) {\r\n        throw new Error('Device not found');\r\n      }\r\n      \r\n      return device;\r\n    } catch (error) {\r\n      console.error(`Error fetching device with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async updateDeviceStatus(id, status) {\r\n    try {\r\n      // In a real application, we would update the device status via the API\r\n      // For now, let's simulate an API call with a delay\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Simulate API response\r\n      const updatedDevice = {\r\n        id,\r\n        status,\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n      \r\n      return updatedDevice;\r\n    } catch (error) {\r\n      console.error(`Error updating device status for id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceStats() {\r\n    try {\r\n      // In a real application, we would fetch stats from the API\r\n      // For now, let's calculate from our mock data\r\n      const devices = await this.getAllDevices();\r\n      \r\n      const stats = {\r\n        total: devices.length,\r\n        online: devices.filter(d => d.status === 'active').length,\r\n        offline: devices.filter(d => d.status === 'inactive').length\r\n      };\r\n      \r\n      return stats;\r\n    } catch (error) {\r\n      console.error('Error fetching device stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async toggleDeviceByType(deviceType) {\r\n    try {\r\n      // In a real application, we would call an API endpoint to toggle devices by type\r\n      // For now, let's simulate an API call with a delay\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeviceController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}