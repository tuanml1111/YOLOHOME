{"ast":null,"code":"import apiService from './apiService';\nconst deviceService = {\n  // Get all devices\n  async getDevices() {\n    try {\n      const response = await apiService.get('/devices');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n      throw error;\n    }\n  },\n  // Get device by ID\n  async getDeviceById(id) {\n    try {\n      // In a real application, we would call the API\n      // const response = await apiService.get(`/devices/${id}`);\n      // return response.data;\n\n      // For demo purposes, simulate API call with mock data\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const devices = await this.getDevices();\n      const device = devices.find(d => d.id === parseInt(id));\n      if (!device) {\n        throw new Error('Device not found');\n      }\n      return device;\n    } catch (error) {\n      console.error(`Error fetching device with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Update device status\n  async updateDeviceStatus(id, status) {\n    try {\n      // In a real application, we would call the API\n      // const response = await apiService.put(`/devices/${id}/status`, { status });\n      // return response.data;\n\n      // For demo purposes, simulate API call with mock data\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return {\n        id: parseInt(id),\n        status,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error(`Error updating device status for ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Toggle device by type\n  async toggleDevicesByType(type) {\n    try {\n      // In a real application, we would call the API\n      // const response = await apiService.post(`/devices/toggle-by-type`, { type });\n      // return response.data;\n\n      // For demo purposes, simulate API call with mock data\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(`Error toggling devices of type ${type}:`, error);\n      throw error;\n    }\n  }\n};\nexport default deviceService;","map":{"version":3,"names":["apiService","deviceService","getDevices","response","get","data","error","console","getDeviceById","id","Promise","resolve","setTimeout","devices","device","find","d","parseInt","Error","updateDeviceStatus","status","lastUpdated","Date","toISOString","toggleDevicesByType","type","success"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy/frontend/src/services/deviceService.js"],"sourcesContent":["import apiService from './apiService';\r\n\r\nconst deviceService = {\r\n  // Get all devices\r\n  async getDevices() {\r\n    try {\r\n      const response = await apiService.get('/devices');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching devices:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Get device by ID\r\n  async getDeviceById(id) {\r\n    try {\r\n      // In a real application, we would call the API\r\n      // const response = await apiService.get(`/devices/${id}`);\r\n      // return response.data;\r\n      \r\n      // For demo purposes, simulate API call with mock data\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      const devices = await this.getDevices();\r\n      const device = devices.find(d => d.id === parseInt(id));\r\n      \r\n      if (!device) {\r\n        throw new Error('Device not found');\r\n      }\r\n      \r\n      return device;\r\n    } catch (error) {\r\n      console.error(`Error fetching device with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Update device status\r\n  async updateDeviceStatus(id, status) {\r\n    try {\r\n      // In a real application, we would call the API\r\n      // const response = await apiService.put(`/devices/${id}/status`, { status });\r\n      // return response.data;\r\n      \r\n      // For demo purposes, simulate API call with mock data\r\n      await new Promise(resolve => setTimeout(resolve, 400));\r\n      \r\n      return {\r\n        id: parseInt(id),\r\n        status,\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error updating device status for ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Toggle device by type\r\n  async toggleDevicesByType(type) {\r\n    try {\r\n      // In a real application, we would call the API\r\n      // const response = await apiService.post(`/devices/toggle-by-type`, { type });\r\n      // return response.data;\r\n      \r\n      // For demo purposes, simulate API call with mock data\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(`Error toggling devices of type ${type}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default deviceService;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAErC,MAAMC,aAAa,GAAG;EACpB;EACA,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAG,CAAC,UAAU,CAAC;MACjD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAME,aAAaA,CAACC,EAAE,EAAE;IACtB,IAAI;MACF;MACA;MACA;;MAEA;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,MAAME,OAAO,GAAG,MAAM,IAAI,CAACX,UAAU,CAAC,CAAC;MACvC,MAAMY,MAAM,GAAGD,OAAO,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,EAAE,KAAKQ,QAAQ,CAACR,EAAE,CAAC,CAAC;MAEvD,IAAI,CAACK,MAAM,EAAE;QACX,MAAM,IAAII,KAAK,CAAC,kBAAkB,CAAC;MACrC;MAEA,OAAOJ,MAAM;IACf,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiCG,EAAE,GAAG,EAAEH,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMa,kBAAkBA,CAACV,EAAE,EAAEW,MAAM,EAAE;IACnC,IAAI;MACF;MACA;MACA;;MAEA;MACA,MAAM,IAAIV,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAO;QACLF,EAAE,EAAEQ,QAAQ,CAACR,EAAE,CAAC;QAChBW,MAAM;QACNC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACtC,CAAC;IACH,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuCG,EAAE,GAAG,EAAEH,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMkB,mBAAmBA,CAACC,IAAI,EAAE;IAC9B,IAAI;MACF;MACA;MACA;;MAEA;MACA,MAAM,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAO;QAAEe,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCmB,IAAI,GAAG,EAAEnB,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}