{"ast":null,"code":"import apiService from './apiService';\nconst authService = {\n  // Login user\n  async login(username, password) {\n    try {\n      const response = await apiService.post('/auth/login', {\n        username,\n        password\n      });\n      if (response.data.success) {\n        // Save token to localStorage\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('userId', response.data.user.id);\n        return response.data;\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Đăng nhập thất bại'\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login service error:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Lỗi kết nối đến server'\n      };\n    }\n  },\n  // Logout user\n  async logout() {\n    try {\n      // In a real application, we would call the API to invalidate the token\n      // For demo purposes, we'll just simulate the API call\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Logout service error:', error);\n      throw error;\n    }\n  },\n  // Check if token is valid\n  async validateToken() {\n    try {\n      // In a real application, we would verify the token with the server\n      // For demo purposes, we'll assume any token in localStorage is valid\n      const token = localStorage.getItem('token');\n      return !!token;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["apiService","authService","login","username","password","response","post","data","success","localStorage","setItem","token","user","id","message","error","_error$response","_error$response$data","console","logout","Promise","resolve","setTimeout","validateToken","getItem"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME/frontend/src/services/authService.js"],"sourcesContent":["import apiService from './apiService';\r\n\r\nconst authService = {\r\n  // Login user\r\n  async login(username, password) {\r\n    try {\r\n      const response = await apiService.post('/auth/login', { username, password });\r\n      \r\n      if (response.data.success) {\r\n        // Save token to localStorage\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('userId', response.data.user.id);\r\n        \r\n        return response.data;\r\n      } else {\r\n        return {\r\n          success: false,\r\n          message: response.data.message || 'Đăng nhập thất bại'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Login service error:', error);\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || 'Lỗi kết nối đến server'\r\n      };\r\n    }\r\n  },\r\n  \r\n  // Logout user\r\n  async logout() {\r\n    try {\r\n      // In a real application, we would call the API to invalidate the token\r\n      // For demo purposes, we'll just simulate the API call\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Logout service error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Check if token is valid\r\n  async validateToken() {\r\n    try {\r\n      // In a real application, we would verify the token with the server\r\n      // For demo purposes, we'll assume any token in localStorage is valid\r\n      const token = localStorage.getItem('token');\r\n      return !!token;\r\n    } catch (error) {\r\n      console.error('Token validation error:', error);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAErC,MAAMC,WAAW,GAAG;EAClB;EACA,MAAMC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAAC,aAAa,EAAE;QAAEH,QAAQ;QAAEC;MAAS,CAAC,CAAC;MAE7E,IAAIC,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB;QACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACI,KAAK,CAAC;QAClDF,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEL,QAAQ,CAACE,IAAI,CAACK,IAAI,CAACC,EAAE,CAAC;QAErD,OAAOR,QAAQ,CAACE,IAAI;MACtB,CAAC,MAAM;QACL,OAAO;UACLC,OAAO,EAAE,KAAK;UACdM,OAAO,EAAET,QAAQ,CAACE,IAAI,CAACO,OAAO,IAAI;QACpC,CAAC;MACH;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdC,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO;QACLP,OAAO,EAAE,KAAK;QACdM,OAAO,EAAE,EAAAE,eAAA,GAAAD,KAAK,CAACV,QAAQ,cAAAW,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBT,IAAI,cAAAU,oBAAA,uBAApBA,oBAAA,CAAsBH,OAAO,KAAI;MAC5C,CAAC;IACH;EACF,CAAC;EAED;EACA,MAAMK,MAAMA,CAAA,EAAG;IACb,IAAI;MACF;MACA;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAO;QAAEb,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMQ,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF;MACA;MACA,MAAMZ,KAAK,GAAGF,YAAY,CAACe,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAO,CAAC,CAACb,KAAK;IAChB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,KAAK;IACd;EACF;AACF,CAAC;AAED,eAAed,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}