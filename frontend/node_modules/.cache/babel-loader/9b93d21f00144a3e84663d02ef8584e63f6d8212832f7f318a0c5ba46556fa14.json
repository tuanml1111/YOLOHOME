{"ast":null,"code":"import axios from 'axios';\n\n// Get the API base URL from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconsole.log('%c API Config:', 'background: #222; color: #bada55', {\n  baseUrl: API_BASE_URL,\n  envValue: process.env.REACT_APP_API_URL,\n  timestamp: new Date().toLocaleTimeString()\n});\n\n// Create an axios instance with default config\nconst apiService = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 second timeout\n});\n\n// Request interceptor to add authorization header\napiService.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  const timestamp = new Date().toLocaleTimeString();\n  console.log('%c API Request:', 'color: blue', {\n    url: `${config.baseURL}${config.url}`,\n    method: config.method.toUpperCase(),\n    timestamp: timestamp,\n    hasToken: !!token\n  });\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('%c Request Error:', 'color: red', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napiService.interceptors.response.use(response => {\n  const timestamp = new Date().toLocaleTimeString();\n  console.log('%c API Response:', 'color: green', {\n    url: response.config.url,\n    status: response.status,\n    timestamp: timestamp,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$config, _error$response, _error$response2, _error$response3;\n  const timestamp = new Date().toLocaleTimeString();\n  console.error('%c API Error:', 'background: red; color: white', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    timestamp: timestamp,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n    message: error.message,\n    data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data\n  });\n\n  // Handle unauthorized errors (401)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n    return Promise.reject({\n      success: false,\n      message: 'Phiên đăng nhập đã hết hạn'\n    });\n  }\n\n  // Handle server errors (500)\n  if (error.response && error.response.status === 500) {\n    console.error('%c Server error:', 'background: red; color: white', error.response.data);\n    return Promise.reject({\n      success: false,\n      message: 'Lỗi máy chủ, vui lòng thử lại sau'\n    });\n  }\n\n  // Handle network errors\n  if (!error.response) {\n    console.error('%c Network error:', 'background: red; color: white', 'Không thể kết nối đến máy chủ');\n    return Promise.reject({\n      success: false,\n      message: 'Không thể kết nối đến máy chủ. Vui lòng kiểm tra kết nối mạng hoặc máy chủ đã được khởi động.'\n    });\n  }\n  return Promise.reject(error);\n});\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","console","log","baseUrl","envValue","timestamp","Date","toLocaleTimeString","apiService","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","url","method","toUpperCase","hasToken","Authorization","error","Promise","reject","response","status","data","_error$config","_error$response","_error$response2","_error$response3","statusText","message","removeItem","window","location","href","success"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Get the API base URL from environment variables\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\nconsole.log('%c API Config:', 'background: #222; color: #bada55', { \r\n  baseUrl: API_BASE_URL, \r\n  envValue: process.env.REACT_APP_API_URL,\r\n  timestamp: new Date().toLocaleTimeString()\r\n});\r\n\r\n// Create an axios instance with default config\r\nconst apiService = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  timeout: 10000, // 10 second timeout\r\n});\r\n\r\n// Request interceptor to add authorization header\r\napiService.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    \r\n    console.log('%c API Request:', 'color: blue', {\r\n      url: `${config.baseURL}${config.url}`,\r\n      method: config.method.toUpperCase(),\r\n      timestamp: timestamp,\r\n      hasToken: !!token\r\n    });\r\n    \r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('%c Request Error:', 'color: red', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle common errors\r\napiService.interceptors.response.use(\r\n  (response) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    console.log('%c API Response:', 'color: green', {\r\n      url: response.config.url,\r\n      status: response.status,\r\n      timestamp: timestamp,\r\n      data: response.data\r\n    });\r\n    return response;\r\n  },\r\n  (error) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    console.error('%c API Error:', 'background: red; color: white', {\r\n      url: error.config?.url,\r\n      timestamp: timestamp,\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText,\r\n      message: error.message,\r\n      data: error.response?.data\r\n    });\r\n    \r\n    // Handle unauthorized errors (401)\r\n    if (error.response && error.response.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n      return Promise.reject({\r\n        success: false,\r\n        message: 'Phiên đăng nhập đã hết hạn'\r\n      });\r\n    }\r\n    \r\n    // Handle server errors (500)\r\n    if (error.response && error.response.status === 500) {\r\n      console.error('%c Server error:', 'background: red; color: white', error.response.data);\r\n      return Promise.reject({\r\n        success: false,\r\n        message: 'Lỗi máy chủ, vui lòng thử lại sau'\r\n      });\r\n    }\r\n    \r\n    // Handle network errors\r\n    if (!error.response) {\r\n      console.error('%c Network error:', 'background: red; color: white', 'Không thể kết nối đến máy chủ');\r\n      return Promise.reject({\r\n        success: false,\r\n        message: 'Không thể kết nối đến máy chủ. Vui lòng kiểm tra kết nối mạng hoặc máy chủ đã được khởi động.'\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n);\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}