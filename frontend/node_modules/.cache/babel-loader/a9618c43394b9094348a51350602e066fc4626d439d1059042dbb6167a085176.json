{"ast":null,"code":"import apiService from '../services/apiService';\nclass AlertConfigController {\n  static async getAlertConfigs() {\n    try {\n      const response = await apiService.get('/alert-config');\n      if (response.data && response.data.data) {\n        return response.data.data.map(config => ({\n          id: config.config_id,\n          sensorType: config.sensor_type,\n          minValue: parseFloat(config.min_value),\n          maxValue: parseFloat(config.max_value),\n          isActive: config.is_active\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching alert configurations:', error);\n      throw error;\n    }\n  }\n  static async getAlertConfigById(id) {\n    try {\n      const response = await apiService.get(`/alert-config/${id}`);\n      if (response.data && response.data.data) {\n        const config = response.data.data;\n        return {\n          id: config.config_id,\n          sensorType: config.sensor_type,\n          minValue: parseFloat(config.min_value),\n          maxValue: parseFloat(config.max_value),\n          isActive: config.is_active\n        };\n      }\n      throw new Error('Alert configuration not found');\n    } catch (error) {\n      console.error(`Error fetching alert configuration with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async createAlertConfig(configData) {\n    try {\n      const response = await apiService.post('/alert-config', {\n        sensor_type: configData.sensorType,\n        min_value: configData.minValue,\n        max_value: configData.maxValue,\n        is_active: configData.isActive !== undefined ? configData.isActive : true\n      });\n      if (response.data && response.data.data) {\n        const config = response.data.data;\n        return {\n          id: config.config_id,\n          sensorType: config.sensor_type,\n          minValue: parseFloat(config.min_value),\n          maxValue: parseFloat(config.max_value),\n          isActive: config.is_active\n        };\n      }\n      throw new Error('Failed to create alert configuration');\n    } catch (error) {\n      console.error('Error creating alert configuration:', error);\n      throw error;\n    }\n  }\n  static async updateAlertConfig(id, configData) {\n    try {\n      const updateData = {};\n      if (configData.minValue !== undefined) updateData.min_value = configData.minValue;\n      if (configData.maxValue !== undefined) updateData.max_value = configData.maxValue;\n      if (configData.isActive !== undefined) updateData.is_active = configData.isActive;\n      const response = await apiService.put(`/alert-config/${id}`, updateData);\n      if (response.data && response.data.data) {\n        const config = response.data.data;\n        return {\n          id: config.config_id,\n          sensorType: config.sensor_type,\n          minValue: parseFloat(config.min_value),\n          maxValue: parseFloat(config.max_value),\n          isActive: config.is_active\n        };\n      }\n      throw new Error('Failed to update alert configuration');\n    } catch (error) {\n      console.error(`Error updating alert configuration for id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async deleteAlertConfig(id) {\n    try {\n      const response = await apiService.delete(`/alert-config/${id}`);\n      if (response.data && response.data.success) {\n        return true;\n      }\n      throw new Error('Failed to delete alert configuration');\n    } catch (error) {\n      console.error(`Error deleting alert configuration with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async resetAlertConfigs() {\n    try {\n      const response = await apiService.post('/alert-config/reset');\n      if (response.data && response.data.data) {\n        return response.data.data.map(config => ({\n          id: config.config_id,\n          sensorType: config.sensor_type,\n          minValue: parseFloat(config.min_value),\n          maxValue: parseFloat(config.max_value),\n          isActive: config.is_active\n        }));\n      }\n      throw new Error('Failed to reset alert configurations');\n    } catch (error) {\n      console.error('Error resetting alert configurations:', error);\n      throw error;\n    }\n  }\n}\nexport default AlertConfigController;","map":{"version":3,"names":["apiService","AlertConfigController","getAlertConfigs","response","get","data","map","config","id","config_id","sensorType","sensor_type","minValue","parseFloat","min_value","maxValue","max_value","isActive","is_active","error","console","getAlertConfigById","Error","createAlertConfig","configData","post","undefined","updateAlertConfig","updateData","put","deleteAlertConfig","delete","success","resetAlertConfigs"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy/frontend/src/controllers/AlertConfigController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass AlertConfigController {\r\n  static async getAlertConfigs() {\r\n    try {\r\n      const response = await apiService.get('/alert-config');\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data.map(config => ({\r\n          id: config.config_id,\r\n          sensorType: config.sensor_type,\r\n          minValue: parseFloat(config.min_value),\r\n          maxValue: parseFloat(config.max_value),\r\n          isActive: config.is_active\r\n        }));\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching alert configurations:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getAlertConfigById(id) {\r\n    try {\r\n      const response = await apiService.get(`/alert-config/${id}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const config = response.data.data;\r\n        return {\r\n          id: config.config_id,\r\n          sensorType: config.sensor_type,\r\n          minValue: parseFloat(config.min_value),\r\n          maxValue: parseFloat(config.max_value),\r\n          isActive: config.is_active\r\n        };\r\n      }\r\n      \r\n      throw new Error('Alert configuration not found');\r\n    } catch (error) {\r\n      console.error(`Error fetching alert configuration with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async createAlertConfig(configData) {\r\n    try {\r\n      const response = await apiService.post('/alert-config', {\r\n        sensor_type: configData.sensorType,\r\n        min_value: configData.minValue,\r\n        max_value: configData.maxValue,\r\n        is_active: configData.isActive !== undefined ? configData.isActive : true\r\n      });\r\n      \r\n      if (response.data && response.data.data) {\r\n        const config = response.data.data;\r\n        return {\r\n          id: config.config_id,\r\n          sensorType: config.sensor_type,\r\n          minValue: parseFloat(config.min_value),\r\n          maxValue: parseFloat(config.max_value),\r\n          isActive: config.is_active\r\n        };\r\n      }\r\n      \r\n      throw new Error('Failed to create alert configuration');\r\n    } catch (error) {\r\n      console.error('Error creating alert configuration:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async updateAlertConfig(id, configData) {\r\n    try {\r\n      const updateData = {};\r\n      \r\n      if (configData.minValue !== undefined) updateData.min_value = configData.minValue;\r\n      if (configData.maxValue !== undefined) updateData.max_value = configData.maxValue;\r\n      if (configData.isActive !== undefined) updateData.is_active = configData.isActive;\r\n      \r\n      const response = await apiService.put(`/alert-config/${id}`, updateData);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const config = response.data.data;\r\n        return {\r\n          id: config.config_id,\r\n          sensorType: config.sensor_type,\r\n          minValue: parseFloat(config.min_value),\r\n          maxValue: parseFloat(config.max_value),\r\n          isActive: config.is_active\r\n        };\r\n      }\r\n      \r\n      throw new Error('Failed to update alert configuration');\r\n    } catch (error) {\r\n      console.error(`Error updating alert configuration for id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async deleteAlertConfig(id) {\r\n    try {\r\n      const response = await apiService.delete(`/alert-config/${id}`);\r\n      \r\n      if (response.data && response.data.success) {\r\n        return true;\r\n      }\r\n      \r\n      throw new Error('Failed to delete alert configuration');\r\n    } catch (error) {\r\n      console.error(`Error deleting alert configuration with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async resetAlertConfigs() {\r\n    try {\r\n      const response = await apiService.post('/alert-config/reset');\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data.map(config => ({\r\n          id: config.config_id,\r\n          sensorType: config.sensor_type,\r\n          minValue: parseFloat(config.min_value),\r\n          maxValue: parseFloat(config.max_value),\r\n          isActive: config.is_active\r\n        }));\r\n      }\r\n      \r\n      throw new Error('Failed to reset alert configurations');\r\n    } catch (error) {\r\n      console.error('Error resetting alert configurations:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlertConfigController; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}