{"ast":null,"code":"import apiService from '../services/apiService';\nclass AlertController {\n  static async getAllAlerts(limit = 50, status = null) {\n    try {\n      // Build query parameters\n      let queryParams = '';\n      if (limit) {\n        queryParams += `limit=${limit}`;\n      }\n      if (status) {\n        queryParams += queryParams ? `&status=${status}` : `status=${status}`;\n      }\n      const url = queryParams ? `/alerts?${queryParams}` : '/alerts';\n      const response = await apiService.get(url);\n      if (response.data && response.data.data) {\n        return response.data.data.map(alert => ({\n          id: alert.alert_id,\n          deviceId: alert.device_id,\n          sensorId: alert.sensor_id,\n          type: alert.alert_type,\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      throw error;\n    }\n  }\n  static async getAlertById(id) {\n    try {\n      const response = await apiService.get(`/alerts/${id}`);\n      if (response.data && response.data.data) {\n        const alert = response.data.data;\n        return {\n          id: alert.alert_id,\n          deviceId: alert.device_id,\n          sensorId: alert.sensor_id,\n          type: alert.alert_type,\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        };\n      }\n      throw new Error('Alert not found');\n    } catch (error) {\n      console.error(`Error fetching alert with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async updateAlertStatus(id, status) {\n    try {\n      const response = await apiService.put(`/alerts/${id}`, {\n        status\n      });\n      if (response.data && response.data.data) {\n        const alert = response.data.data;\n        return {\n          id: alert.alert_id,\n          deviceId: alert.device_id,\n          sensorId: alert.sensor_id,\n          type: alert.alert_type,\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        };\n      }\n      throw new Error('Failed to update alert status');\n    } catch (error) {\n      console.error(`Error updating alert status for id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async resolveAllAlerts() {\n    try {\n      const response = await apiService.put('/alerts/resolve-all');\n      if (response.data && response.data.success) {\n        return {\n          success: true,\n          count: response.data.count,\n          message: response.data.message\n        };\n      }\n      throw new Error('Failed to resolve all alerts');\n    } catch (error) {\n      console.error('Error resolving all alerts:', error);\n      throw error;\n    }\n  }\n}\nexport default AlertController;","map":{"version":3,"names":["apiService","AlertController","getAllAlerts","limit","status","queryParams","url","response","get","data","map","alert","id","alert_id","deviceId","device_id","sensorId","sensor_id","type","alert_type","message","amessage","timestamp","alerted_time","error","console","getAlertById","Error","updateAlertStatus","put","resolveAllAlerts","success","count"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy/frontend/src/controllers/AlertController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass AlertController {\r\n  static async getAllAlerts(limit = 50, status = null) {\r\n    try {\r\n      // Build query parameters\r\n      let queryParams = '';\r\n      if (limit) {\r\n        queryParams += `limit=${limit}`;\r\n      }\r\n      if (status) {\r\n        queryParams += queryParams ? `&status=${status}` : `status=${status}`;\r\n      }\r\n      \r\n      const url = queryParams ? `/alerts?${queryParams}` : '/alerts';\r\n      const response = await apiService.get(url);\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          deviceId: alert.device_id,\r\n          sensorId: alert.sensor_id,\r\n          type: alert.alert_type,\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getAlertById(id) {\r\n    try {\r\n      const response = await apiService.get(`/alerts/${id}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const alert = response.data.data;\r\n        return {\r\n          id: alert.alert_id,\r\n          deviceId: alert.device_id,\r\n          sensorId: alert.sensor_id,\r\n          type: alert.alert_type,\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        };\r\n      }\r\n      \r\n      throw new Error('Alert not found');\r\n    } catch (error) {\r\n      console.error(`Error fetching alert with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async updateAlertStatus(id, status) {\r\n    try {\r\n      const response = await apiService.put(`/alerts/${id}`, { status });\r\n      \r\n      if (response.data && response.data.data) {\r\n        const alert = response.data.data;\r\n        return {\r\n          id: alert.alert_id,\r\n          deviceId: alert.device_id,\r\n          sensorId: alert.sensor_id,\r\n          type: alert.alert_type,\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        };\r\n      }\r\n      \r\n      throw new Error('Failed to update alert status');\r\n    } catch (error) {\r\n      console.error(`Error updating alert status for id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async resolveAllAlerts() {\r\n    try {\r\n      const response = await apiService.put('/alerts/resolve-all');\r\n      \r\n      if (response.data && response.data.success) {\r\n        return {\r\n          success: true,\r\n          count: response.data.count,\r\n          message: response.data.message\r\n        };\r\n      }\r\n      \r\n      throw new Error('Failed to resolve all alerts');\r\n    } catch (error) {\r\n      console.error('Error resolving all alerts:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlertController; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}