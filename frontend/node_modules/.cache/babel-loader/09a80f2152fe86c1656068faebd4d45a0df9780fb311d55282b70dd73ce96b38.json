{"ast":null,"code":"import apiService from './apiService';\nconst authService = {\n  // Login user\n  async login(username, password) {\n    console.log('%c LOGIN ATTEMPT', 'background: #222; color: #bada55', {\n      username,\n      targetUrl: `${apiService.defaults.baseURL}/auth/login`\n    });\n    try {\n      // Log request before it's sent\n      console.log('%c Sending login request...', 'color: blue');\n\n      // Add timeout tracking\n      const startTime = new Date().getTime();\n      const response = await apiService.post('/auth/login', {\n        username,\n        password\n      });\n\n      // Log response timing\n      const endTime = new Date().getTime();\n      console.log(`%c Response received in ${endTime - startTime}ms`, 'color: green');\n      console.log('%c Login response:', 'color: green', response);\n      if (response.data.success) {\n        // Save token to localStorage\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('userId', response.data.user.id);\n        console.log('%c Login successful!', 'background: green; color: white');\n        return response.data;\n      } else {\n        console.error('%c Login failed:', 'background: red; color: white', response.data.message);\n        return {\n          success: false,\n          message: response.data.message || 'Đăng nhập thất bại'\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response4, _error$response4$data;\n      const errorTime = new Date().toLocaleTimeString();\n      console.error(`%c Login error at ${errorTime}:`, 'background: red; color: white', error);\n\n      // Detailed logging for network errors\n      console.error('%c Error details:', 'color: red', {\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n        data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n        isNetworkError: !error.response,\n        time: errorTime\n      });\n\n      // Kiểm tra chi tiết lỗi kết nối\n      if (!error.response) {\n        return {\n          success: false,\n          message: 'Không thể kết nối đến máy chủ. Vui lòng kiểm tra kết nối mạng hoặc máy chủ đã được khởi động.'\n        };\n      }\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Lỗi kết nối đến server'\n      };\n    }\n  },\n  // Logout user\n  async logout() {\n    try {\n      // In a real application, we would call the API to invalidate the token\n      // For demo purposes, we'll just simulate the API call\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Logout service error:', error);\n      throw error;\n    }\n  },\n  // Check if token is valid\n  async validateToken() {\n    try {\n      // In a real application, we would verify the token with the server\n      // For demo purposes, we'll assume any token in localStorage is valid\n      const token = localStorage.getItem('token');\n      return !!token;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["apiService","authService","login","username","password","console","log","targetUrl","defaults","baseURL","startTime","Date","getTime","response","post","endTime","data","success","localStorage","setItem","token","user","id","error","message","_error$response","_error$response2","_error$response3","_error$response4","_error$response4$data","errorTime","toLocaleTimeString","status","statusText","isNetworkError","time","logout","Promise","resolve","setTimeout","validateToken","getItem"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME/frontend/src/services/authService.js"],"sourcesContent":["import apiService from './apiService';\r\n\r\nconst authService = {\r\n  // Login user\r\n  async login(username, password) {\r\n    console.log('%c LOGIN ATTEMPT', 'background: #222; color: #bada55', { username, targetUrl: `${apiService.defaults.baseURL}/auth/login` });\r\n    \r\n    try {\r\n      // Log request before it's sent\r\n      console.log('%c Sending login request...', 'color: blue');\r\n      \r\n      // Add timeout tracking\r\n      const startTime = new Date().getTime();\r\n      \r\n      const response = await apiService.post('/auth/login', { username, password });\r\n      \r\n      // Log response timing\r\n      const endTime = new Date().getTime();\r\n      console.log(`%c Response received in ${endTime - startTime}ms`, 'color: green');\r\n      console.log('%c Login response:', 'color: green', response);\r\n      \r\n      if (response.data.success) {\r\n        // Save token to localStorage\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('userId', response.data.user.id);\r\n        \r\n        console.log('%c Login successful!', 'background: green; color: white');\r\n        return response.data;\r\n      } else {\r\n        console.error('%c Login failed:', 'background: red; color: white', response.data.message);\r\n        return {\r\n          success: false,\r\n          message: response.data.message || 'Đăng nhập thất bại'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      const errorTime = new Date().toLocaleTimeString();\r\n      console.error(`%c Login error at ${errorTime}:`, 'background: red; color: white', error);\r\n      \r\n      // Detailed logging for network errors\r\n      console.error('%c Error details:', 'color: red', {\r\n        status: error.response?.status,\r\n        statusText: error.response?.statusText,\r\n        data: error.response?.data,\r\n        isNetworkError: !error.response,\r\n        time: errorTime\r\n      });\r\n      \r\n      // Kiểm tra chi tiết lỗi kết nối\r\n      if (!error.response) {\r\n        return {\r\n          success: false,\r\n          message: 'Không thể kết nối đến máy chủ. Vui lòng kiểm tra kết nối mạng hoặc máy chủ đã được khởi động.'\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || 'Lỗi kết nối đến server'\r\n      };\r\n    }\r\n  },\r\n  \r\n  // Logout user\r\n  async logout() {\r\n    try {\r\n      // In a real application, we would call the API to invalidate the token\r\n      // For demo purposes, we'll just simulate the API call\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Logout service error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Check if token is valid\r\n  async validateToken() {\r\n    try {\r\n      // In a real application, we would verify the token with the server\r\n      // For demo purposes, we'll assume any token in localStorage is valid\r\n      const token = localStorage.getItem('token');\r\n      return !!token;\r\n    } catch (error) {\r\n      console.error('Token validation error:', error);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}