{"ast":null,"code":"import apiService from '../services/apiService';\nclass SensorController {\n  static async getLatestReadings() {\n    try {\n      // In a real application, we would fetch data from the API\n      // For now, let's use mock data\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Random values for demo purposes\n      const mockData = {\n        temperature: (Math.random() * 10 + 25).toFixed(1),\n        humidity: (Math.random() * 20 + 60).toFixed(1),\n        motion: Math.random() > 0.7\n      };\n      return mockData;\n    } catch (error) {\n      console.error('Error fetching sensor readings:', error);\n      throw error;\n    }\n  }\n  static async getSensorHistory(sensorType, timeRange = 'day') {\n    try {\n      // In a real application, we would fetch historical data from the API\n      // For now, let's generate mock data\n      const now = new Date();\n      const data = [];\n\n      // Generate mock data points\n      if (timeRange === 'day') {\n        // 24 hours, one point per hour\n        for (let i = 23; i >= 0; i--) {\n          const timestamp = new Date(now);\n          timestamp.setHours(now.getHours() - i);\n          let value;\n          if (sensorType === 'temperature') {\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\n          } else if (sensorType === 'humidity') {\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\n          } else {\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\n          }\n          data.push({\n            timestamp: timestamp.toISOString(),\n            value: parseFloat(value)\n          });\n        }\n      }\n      return data;\n    } catch (error) {\n      console.error(`Error fetching ${sensorType} history:`, error);\n      throw error;\n    }\n  }\n  static async getRecentAlerts() {\n    try {\n      // In a real application, we would fetch alerts from the API\n      // For now, let's use mock data\n      const mockAlerts = [{\n        id: 1,\n        type: 'temperature',\n        message: 'Temperature exceeded 30°C',\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n        // 30 minutes ago\n        status: 'active'\n      }, {\n        id: 2,\n        type: 'motion',\n        message: 'Motion detected in living room',\n        timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\n        // 45 minutes ago\n        status: 'active'\n      }, {\n        id: 3,\n        type: 'humidity',\n        message: 'Humidity level below 30%',\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\n        // 2 hours ago\n        status: 'resolved'\n      }];\n      return mockAlerts;\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      throw error;\n    }\n  }\n}\nexport default SensorController;","map":{"version":3,"names":["apiService","SensorController","getLatestReadings","Promise","resolve","setTimeout","mockData","temperature","Math","random","toFixed","humidity","motion","error","console","getSensorHistory","sensorType","timeRange","now","Date","data","i","timestamp","setHours","getHours","value","push","toISOString","parseFloat","getRecentAlerts","mockAlerts","id","type","message","status"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME/frontend/src/controllers/SensorController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass SensorController {\r\n  static async getLatestReadings() {\r\n    try {\r\n      // In a real application, we would fetch data from the API\r\n      // For now, let's use mock data\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      // Random values for demo purposes\r\n      const mockData = {\r\n        temperature: (Math.random() * 10 + 25).toFixed(1),\r\n        humidity: (Math.random() * 20 + 60).toFixed(1),\r\n        motion: Math.random() > 0.7\r\n      };\r\n      \r\n      return mockData;\r\n    } catch (error) {\r\n      console.error('Error fetching sensor readings:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getSensorHistory(sensorType, timeRange = 'day') {\r\n    try {\r\n      // In a real application, we would fetch historical data from the API\r\n      // For now, let's generate mock data\r\n      const now = new Date();\r\n      const data = [];\r\n      \r\n      // Generate mock data points\r\n      if (timeRange === 'day') {\r\n        // 24 hours, one point per hour\r\n        for (let i = 23; i >= 0; i--) {\r\n          const timestamp = new Date(now);\r\n          timestamp.setHours(now.getHours() - i);\r\n          \r\n          let value;\r\n          if (sensorType === 'temperature') {\r\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\r\n          } else if (sensorType === 'humidity') {\r\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\r\n          } else {\r\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\r\n          }\r\n          \r\n          data.push({\r\n            timestamp: timestamp.toISOString(),\r\n            value: parseFloat(value)\r\n          });\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error(`Error fetching ${sensorType} history:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getRecentAlerts() {\r\n    try {\r\n      // In a real application, we would fetch alerts from the API\r\n      // For now, let's use mock data\r\n      const mockAlerts = [\r\n        {\r\n          id: 1,\r\n          type: 'temperature',\r\n          message: 'Temperature exceeded 30°C',\r\n          timestamp: new Date(Date.now() - 30 * 60000).toISOString(), // 30 minutes ago\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 2,\r\n          type: 'motion',\r\n          message: 'Motion detected in living room',\r\n          timestamp: new Date(Date.now() - 45 * 60000).toISOString(), // 45 minutes ago\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 3,\r\n          type: 'humidity',\r\n          message: 'Humidity level below 30%',\r\n          timestamp: new Date(Date.now() - 120 * 60000).toISOString(), // 2 hours ago\r\n          status: 'resolved'\r\n        }\r\n      ];\r\n      \r\n      return mockAlerts;\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default SensorController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}