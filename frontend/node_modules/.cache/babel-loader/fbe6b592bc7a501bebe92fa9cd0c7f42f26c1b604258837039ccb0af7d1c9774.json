{"ast":null,"code":"import DeviceModel from '../models/DeviceModel';\nimport apiService from '../services/apiService';\nimport deviceService from '../services/deviceService';\nclass DeviceController {\n  static async getAllDevices() {\n    try {\n      // Fetch devices from the API through deviceService\n      const devices = await deviceService.getDevices();\n\n      // Map backend properties to frontend model properties\n      return devices.map(device => new DeviceModel({\n        id: device.device_id,\n        name: device.device_name,\n        type: device.device_type,\n        location: device.dlocation,\n        status: device.status,\n        lastUpdated: device.created_time || new Date().toISOString()\n      }));\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n      throw error;\n    }\n  }\n  static async getDeviceById(id) {\n    try {\n      // In a real application, we would fetch data from the API\n      // For now, let's find the device from our mock data\n      const devices = await this.getAllDevices();\n      const device = devices.find(d => d.id === id);\n      if (!device) {\n        throw new Error('Device not found');\n      }\n      return device;\n    } catch (error) {\n      console.error(`Error fetching device with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async updateDeviceStatus(id, status) {\n    try {\n      // Call the API to update the device status\n      const response = await apiService.put(`/devices/${id}`, {\n        status\n      });\n      return new DeviceModel({\n        id: response.data.device_id,\n        name: response.data.device_name,\n        type: response.data.device_type,\n        location: response.data.dlocation,\n        status: response.data.status,\n        lastUpdated: response.data.created_time || new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(`Error updating device status for id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async getDeviceStats() {\n    try {\n      // Fetch stats from the API\n      const response = await apiService.get('/devices/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching device stats:', error);\n      throw error;\n    }\n  }\n  static async toggleDeviceByType(deviceType) {\n    try {\n      // Call the API endpoint to toggle devices by type\n      const response = await apiService.post('/devices/toggle-by-type', {\n        type: deviceType\n      });\n      return {\n        success: response.data.success,\n        devices: response.data.data ? response.data.data.map(device => new DeviceModel({\n          id: device.device_id,\n          name: device.device_name,\n          type: device.device_type,\n          location: device.dlocation,\n          status: device.status,\n          lastUpdated: device.created_time || new Date().toISOString()\n        })) : []\n      };\n    } catch (error) {\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\n      throw error;\n    }\n  }\n}\nexport default DeviceController;","map":{"version":3,"names":["DeviceModel","apiService","deviceService","DeviceController","getAllDevices","devices","getDevices","map","device","id","device_id","name","device_name","type","device_type","location","dlocation","status","lastUpdated","created_time","Date","toISOString","error","console","getDeviceById","find","d","Error","updateDeviceStatus","response","put","data","getDeviceStats","get","toggleDeviceByType","deviceType","post","success"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy/frontend/src/controllers/DeviceController.js"],"sourcesContent":["import DeviceModel from '../models/DeviceModel';\r\nimport apiService from '../services/apiService';\r\nimport deviceService from '../services/deviceService';\r\n\r\nclass DeviceController {\r\n  static async getAllDevices() {\r\n    try {\r\n      // Fetch devices from the API through deviceService\r\n      const devices = await deviceService.getDevices();\r\n      \r\n      // Map backend properties to frontend model properties\r\n      return devices.map(device => new DeviceModel({\r\n        id: device.device_id,\r\n        name: device.device_name,\r\n        type: device.device_type,\r\n        location: device.dlocation,\r\n        status: device.status,\r\n        lastUpdated: device.created_time || new Date().toISOString()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching devices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceById(id) {\r\n    try {\r\n      // In a real application, we would fetch data from the API\r\n      // For now, let's find the device from our mock data\r\n      const devices = await this.getAllDevices();\r\n      const device = devices.find(d => d.id === id);\r\n      \r\n      if (!device) {\r\n        throw new Error('Device not found');\r\n      }\r\n      \r\n      return device;\r\n    } catch (error) {\r\n      console.error(`Error fetching device with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async updateDeviceStatus(id, status) {\r\n    try {\r\n      // Call the API to update the device status\r\n      const response = await apiService.put(`/devices/${id}`, { status });\r\n      return new DeviceModel({\r\n        id: response.data.device_id,\r\n        name: response.data.device_name,\r\n        type: response.data.device_type,\r\n        location: response.data.dlocation,\r\n        status: response.data.status,\r\n        lastUpdated: response.data.created_time || new Date().toISOString()\r\n      });\r\n    } catch (error) {\r\n      console.error(`Error updating device status for id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceStats() {\r\n    try {\r\n      // Fetch stats from the API\r\n      const response = await apiService.get('/devices/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching device stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async toggleDeviceByType(deviceType) {\r\n    try {\r\n      // Call the API endpoint to toggle devices by type\r\n      const response = await apiService.post('/devices/toggle-by-type', { type: deviceType });\r\n      return {\r\n        success: response.data.success,\r\n        devices: response.data.data ? response.data.data.map(device => new DeviceModel({\r\n          id: device.device_id,\r\n          name: device.device_name,\r\n          type: device.device_type,\r\n          location: device.dlocation,\r\n          status: device.status,\r\n          lastUpdated: device.created_time || new Date().toISOString()\r\n        })) : []\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeviceController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}