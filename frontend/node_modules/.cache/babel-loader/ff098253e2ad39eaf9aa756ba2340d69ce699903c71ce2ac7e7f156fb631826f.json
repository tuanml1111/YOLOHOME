{"ast":null,"code":"import apiService from '../services/apiService';\nclass SensorController {\n  static async getLatestReadings() {\n    try {\n      console.log('Fetching latest sensor readings from API');\n      const response = await apiService.get('/sensors/readings');\n      console.log('Raw API response:', response);\n      if (response.data && response.data.data) {\n        const data = response.data.data;\n        console.log('API response data:', data);\n\n        // Đảm bảo giá trị là number chứ không phải string\n        return {\n          temperature: parseFloat(data.temperature || 25.5),\n          humidity: parseFloat(data.humidity || 60.2),\n          motion: data.motion === 1 || data.motion === true\n        };\n      }\n      console.warn('API response did not contain expected data format, using fallback values');\n      // Fallback to default values if API fails or returns unexpected format\n      return {\n        temperature: 25.5,\n        humidity: 60.2,\n        motion: false\n      };\n    } catch (error) {\n      console.error('Error fetching sensor readings:', error);\n      // Fallback to default values in case of error\n      return {\n        temperature: 25.5,\n        humidity: 60.2,\n        motion: false\n      };\n    }\n  }\n  static async getSensorHistory(sensorType, timeRange = 'day') {\n    try {\n      // In a real application, we would fetch historical data from the API\n      // For now, let's generate mock data\n      const now = new Date();\n      const data = [];\n\n      // Generate mock data points\n      if (timeRange === 'day') {\n        // 24 hours, one point per hour\n        for (let i = 23; i >= 0; i--) {\n          const timestamp = new Date(now);\n          timestamp.setHours(now.getHours() - i);\n          let value;\n          if (sensorType === 'temperature') {\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\n          } else if (sensorType === 'humidity') {\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\n          } else {\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\n          }\n          data.push({\n            timestamp: timestamp.toISOString(),\n            value: parseFloat(value)\n          });\n        }\n      }\n      return data;\n    } catch (error) {\n      console.error(`Error fetching ${sensorType} history:`, error);\n      throw error;\n    }\n  }\n  static async getRecentAlerts() {\n    try {\n      // Fetch real alerts from API\n      const response = await apiService.get('/alerts/recent');\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\n        return response.data.data.map(alert => ({\n          id: alert.alert_id,\n          type: alert.alert_type.toLowerCase(),\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        }));\n      }\n\n      // Fallback to mock data if API fails or returns unexpected format\n      return [{\n        id: 1,\n        type: 'temperature',\n        message: 'Temperature exceeded 30°C',\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 2,\n        type: 'motion',\n        message: 'Motion detected in living room',\n        timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 3,\n        type: 'humidity',\n        message: 'Humidity level below 30%',\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\n        status: 'resolved'\n      }];\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      // Fallback to mock data\n      return [{\n        id: 1,\n        type: 'temperature',\n        message: 'Temperature exceeded 30°C',\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 2,\n        type: 'motion',\n        message: 'Motion detected in living room',\n        timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\n        status: 'active'\n      }, {\n        id: 3,\n        type: 'humidity',\n        message: 'Humidity level below 30%',\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\n        status: 'resolved'\n      }];\n    }\n  }\n}\nexport default SensorController;","map":{"version":3,"names":["apiService","SensorController","getLatestReadings","console","log","response","get","data","temperature","parseFloat","humidity","motion","warn","error","getSensorHistory","sensorType","timeRange","now","Date","i","timestamp","setHours","getHours","value","Math","random","toFixed","push","toISOString","getRecentAlerts","Array","isArray","map","alert","id","alert_id","type","alert_type","toLowerCase","message","amessage","alerted_time","status"],"sources":["C:/Users/admin/OneDrive/Máy tính/YOLO_HOME - Copy/frontend/src/controllers/SensorController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass SensorController {\r\n  static async getLatestReadings() {\r\n    try {\r\n      console.log('Fetching latest sensor readings from API');\r\n      const response = await apiService.get('/sensors/readings');\r\n      \r\n      console.log('Raw API response:', response);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const data = response.data.data;\r\n        console.log('API response data:', data);\r\n        \r\n        // Đảm bảo giá trị là number chứ không phải string\r\n        return {\r\n          temperature: parseFloat(data.temperature || 25.5),\r\n          humidity: parseFloat(data.humidity || 60.2),\r\n          motion: data.motion === 1 || data.motion === true\r\n        };\r\n      }\r\n      \r\n      console.warn('API response did not contain expected data format, using fallback values');\r\n      // Fallback to default values if API fails or returns unexpected format\r\n      return {\r\n        temperature: 25.5,\r\n        humidity: 60.2,\r\n        motion: false\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching sensor readings:', error);\r\n      // Fallback to default values in case of error\r\n      return {\r\n        temperature: 25.5,\r\n        humidity: 60.2,\r\n        motion: false\r\n      };\r\n    }\r\n  }\r\n  \r\n  static async getSensorHistory(sensorType, timeRange = 'day') {\r\n    try {\r\n      // In a real application, we would fetch historical data from the API\r\n      // For now, let's generate mock data\r\n      const now = new Date();\r\n      const data = [];\r\n      \r\n      // Generate mock data points\r\n      if (timeRange === 'day') {\r\n        // 24 hours, one point per hour\r\n        for (let i = 23; i >= 0; i--) {\r\n          const timestamp = new Date(now);\r\n          timestamp.setHours(now.getHours() - i);\r\n          \r\n          let value;\r\n          if (sensorType === 'temperature') {\r\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\r\n          } else if (sensorType === 'humidity') {\r\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\r\n          } else {\r\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\r\n          }\r\n          \r\n          data.push({\r\n            timestamp: timestamp.toISOString(),\r\n            value: parseFloat(value)\r\n          });\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error(`Error fetching ${sensorType} history:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getRecentAlerts() {\r\n    try {\r\n      // Fetch real alerts from API\r\n      const response = await apiService.get('/alerts/recent');\r\n      \r\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\r\n        return response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          type: alert.alert_type.toLowerCase(),\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n      }\r\n      \r\n      // Fallback to mock data if API fails or returns unexpected format\r\n      return [\r\n        {\r\n          id: 1,\r\n          type: 'temperature',\r\n          message: 'Temperature exceeded 30°C',\r\n          timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 2,\r\n          type: 'motion',\r\n          message: 'Motion detected in living room',\r\n          timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 3,\r\n          type: 'humidity',\r\n          message: 'Humidity level below 30%',\r\n          timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\r\n          status: 'resolved'\r\n        }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      // Fallback to mock data\r\n      return [\r\n        {\r\n          id: 1,\r\n          type: 'temperature',\r\n          message: 'Temperature exceeded 30°C',\r\n          timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 2,\r\n          type: 'motion',\r\n          message: 'Motion detected in living room',\r\n          timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: 3,\r\n          type: 'humidity',\r\n          message: 'Humidity level below 30%',\r\n          timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\r\n          status: 'resolved'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\nexport default SensorController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}